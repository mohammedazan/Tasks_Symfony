(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var ko = require('knockout');
var _ = require('lodash');
var octicons = require('octicons');
var components = require('ungit-components');
var programEvents = require('ungit-program-events');
components.register('remotes', function (args) { return new RemotesViewModel(args.server, args.repoPath); });
var RemotesViewModel = /** @class */ (function () {
    function RemotesViewModel(server, repoPath) {
        var _this = this;
        this.repoPath = repoPath;
        this.server = server;
        this.remotes = ko.observable([]);
        this.currentRemote = ko.observable(null);
        this.currentRemote.subscribe(function (value) {
            programEvents.dispatch({ event: 'current-remote-changed', newRemote: value });
        });
        this.fetchLabel = ko.computed(function () {
            if (_this.currentRemote())
                return "Fetch from ".concat(_this.currentRemote());
            else
                return 'No remotes specified';
        });
        this.remotesIcon = octicons.download.toSVG({ height: 18 });
        this.closeIcon = octicons.x.toSVG({ height: 18 });
        this.fetchEnabled = ko.computed(function () { return _this.remotes().length > 0; });
        this.shouldAutoFetch = ungit.config.autoFetch;
        this.updateRemotes();
    }
    RemotesViewModel.prototype.updateNode = function (parentElement) {
        ko.renderTemplate('remotes', this, {}, parentElement);
    };
    RemotesViewModel.prototype.clickFetch = function () {
        this.fetch({ nodes: true, tags: true });
    };
    RemotesViewModel.prototype.onProgramEvent = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(event.event === 'request-app-content-refresh' || event.event === 'request-fetch-tags')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.fetch({ tags: true })];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 2:
                        if (!(event.event === 'git-directory-changed' && this.shouldAutoFetch)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.fetch({ tags: true })];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4:
                        if (!(event.event === 'update-remote')) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.updateRemotes()];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    RemotesViewModel.prototype.fetch = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var tagPromise, _a, _b, err_1, errorMessage, stdout, stderr;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!this.currentRemote() || !options.tags)
                            return [2 /*return*/];
                        ungit.logger.debug('remotes.fetch() triggered');
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 3, 4, 5]);
                        tagPromise = this.server.getPromise('/remote/tags', {
                            path: this.repoPath(),
                            remote: this.currentRemote()
                        });
                        _b = (_a = programEvents).dispatch;
                        _c = { event: 'remote-tags-update' };
                        return [4 /*yield*/, tagPromise];
                    case 2:
                        _b.apply(_a, [(_c.tags = _d.sent(), _c)]);
                        if (!this.server.isInternetConnected) {
                            this.server.isInternetConnected = true;
                        }
                        return [3 /*break*/, 5];
                    case 3:
                        err_1 = _d.sent();
                        errorMessage = void 0;
                        stdout = void 0;
                        stderr = void 0;
                        try {
                            errorMessage = "Ungit has failed to fetch a remote.  ".concat(err_1.res.body.error);
                            stdout = err_1.res.body.stdout;
                            stderr = err_1.res.body.stderr;
                        }
                        catch (e) {
                            errorMessage = '';
                        }
                        if (errorMessage.includes('Could not resolve host')) {
                            if (this.server.isInternetConnected) {
                                this.server.isInternetConnected = false;
                                errorMessage =
                                    'Could not resolve host. This usually means you are disconnected from internet and no longer push or fetch from remote. However, Ungit will be functional for local git operations.';
                                stdout = '';
                                stderr = '';
                            }
                            else {
                                // Message is already seen, just return
                                return [2 /*return*/];
                            }
                        }
                        programEvents.dispatch({
                            event: 'git-error',
                            data: {
                                isWarning: true,
                                command: err_1.res.body.command,
                                error: err_1.res.body.error,
                                stdout: stdout,
                                stderr: stderr,
                                repoPath: err_1.res.body.workingDirectory
                            }
                        });
                        return [3 /*break*/, 5];
                    case 4:
                        ungit.logger.debug('remotes.fetch() finished');
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    RemotesViewModel.prototype.updateRemotes = function () {
        var _this = this;
        return this.server
            .getPromise('/remotes', { path: this.repoPath() })
            .then(function (remotes) {
            remotes = remotes.map(function (remote) { return ({
                name: remote,
                changeRemote: function () {
                    _this.currentRemote(remote);
                }
            }); });
            _this.remotes(remotes);
            if (!_this.currentRemote() && remotes.length > 0) {
                if (_.find(remotes, { name: 'origin' })) {
                    // default to origin if it exists
                    _this.currentRemote('origin');
                }
                else {
                    // otherwise take the first one
                    _this.currentRemote(remotes[0].name);
                }
                if (_this.shouldAutoFetch) {
                    _this.shouldAutoFetch = false;
                    return _this.fetch({ nodes: true, tags: true });
                }
            }
        })
            .catch(function (err) {
            if (err.errorCode != 'not-a-repository') {
                _this.server.unhandledRejection(err);
            }
            else {
                ungit.logger.warn('updateRemotes failed', err);
            }
        });
    };
    RemotesViewModel.prototype.showAddRemoteDialog = function () {
        components.showModal('addremotemodal', { path: this.repoPath() });
    };
    RemotesViewModel.prototype.remoteRemove = function (remote) {
        var _this = this;
        components.showModal('yesnomodal', {
            title: 'Are you sure?',
            details: "Deleting ".concat(remote.name, " remote cannot be undone with ungit."),
            closeFunc: function (isYes) {
                if (isYes) {
                    _this.server
                        .delPromise("/remotes/".concat(remote.name), { path: _this.repoPath() })
                        .then(function () {
                        _this.updateRemotes();
                    })
                        .catch(function (e) { return _this.server.unhandledRejection(e); });
                }
            }
        });
    };
    return RemotesViewModel;
}());

},{"knockout":undefined,"lodash":undefined,"octicons":undefined,"ungit-components":undefined,"ungit-program-events":undefined}]},{},[1])
//# sourceMappingURL=remotes.bundle.js.map
