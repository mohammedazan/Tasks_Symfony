(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentRoot = void 0;
var ComponentRoot = /** @class */ (function () {
    function ComponentRoot() {
        this.defaultDebounceOption = {
            maxWait: 1500,
            leading: false,
            trailing: true
        };
    }
    ComponentRoot.prototype.isSamePayload = function (value) {
        var jsonString = JSON.stringify(value);
        if (this._apiCache === jsonString) {
            ungit.logger.debug("ignoring redraw for same ".concat(this.constructor.name, " payload."));
            return true;
        }
        ungit.logger.debug("redrawing ".concat(this.constructor.name, " payload.  \n").concat(jsonString));
        this._apiCache = jsonString;
        return false;
    };
    ComponentRoot.prototype.clearApiCache = function () {
        this._apiCache = undefined;
    };
    return ComponentRoot;
}());
exports.ComponentRoot = ComponentRoot;

},{}],2:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var ko = require('knockout');
var _ = require('lodash');
var octicons = require('octicons');
var moment = require('moment');
var components = require('ungit-components');
var storage = require('ungit-storage');
var ComponentRoot = require('../ComponentRoot').ComponentRoot;
components.register('stash', function (args) { return new StashViewModel(args.server, args.repoPath); });
var StashItemViewModel = /** @class */ (function () {
    function StashItemViewModel(stash, data) {
        this.stash = stash;
        this.server = stash.server;
        this.id = data.reflogId;
        this.sha1 = data.sha1;
        this.title = "".concat(data.reflogName, " ").concat(moment(new Date(data.commitDate)).fromNow());
        this.message = data.message;
        this.showCommitDiff = ko.observable(false);
        this.commitDiff = ko.observable(components.create('commitDiff', {
            fileLineDiffs: data.fileLineDiffs.slice(),
            sha1: this.sha1,
            repoPath: stash.repoPath,
            server: stash.server,
            showDiffButtons: ko.observable(true)
        }));
        this.dropIcon = octicons.x.toSVG({ height: 18 });
        this.applyIcon = octicons.pencil.toSVG({ height: 20 });
    }
    StashItemViewModel.prototype.apply = function () {
        var _this = this;
        this.server
            .delPromise("/stashes/".concat(this.id), { path: this.stash.repoPath(), apply: true })
            .catch(function (e) { return _this.server.unhandledRejection(e); });
    };
    StashItemViewModel.prototype.drop = function () {
        var _this = this;
        components.showModal('yesnomodal', {
            title: 'Are you sure you want to drop the stash?',
            details: 'This operation cannot be undone.',
            closeFunc: function (isYes) {
                if (!isYes)
                    return;
                _this.server
                    .delPromise("/stashes/".concat(_this.id), { path: _this.stash.repoPath() })
                    .catch(function (e) { return _this.server.unhandledRejection(e); });
            }
        });
    };
    StashItemViewModel.prototype.toggleShowCommitDiffs = function () {
        this.showCommitDiff(!this.showCommitDiff());
    };
    return StashItemViewModel;
}());
var StashViewModel = /** @class */ (function (_super) {
    __extends(StashViewModel, _super);
    function StashViewModel(server, repoPath) {
        var _this = _super.call(this) || this;
        _this.server = server;
        _this.repoPath = repoPath;
        _this.refresh = _.debounce(_this._refresh, 250, _this.defaultDebounceOption);
        _this.stashedChanges = ko.observable([]);
        _this.isShow = ko.observable(storage.getItem('showStash') === 'true');
        _this.visible = ko.computed(function () { return _this.stashedChanges().length > 0 && _this.isShow(); });
        _this.expandIcon = octicons['chevron-right'].toSVG({ height: 18 });
        _this.expandedIcon = octicons['chevron-down'].toSVG({ height: 22 });
        _this.refresh();
        return _this;
    }
    StashViewModel.prototype.updateNode = function (parentElement) {
        ko.renderTemplate('stash', this, {}, parentElement);
    };
    StashViewModel.prototype.onProgramEvent = function (event) {
        if (event.event == 'request-app-content-refresh' || event.event == 'git-directory-changed') {
            this.refresh();
        }
    };
    StashViewModel.prototype._refresh = function () {
        return __awaiter(this, void 0, void 0, function () {
            var stashes_1, changed, err_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ungit.logger.debug('stash.refresh() triggered');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.server.getPromise('/stashes', { path: this.repoPath() })];
                    case 2:
                        stashes_1 = _a.sent();
                        if (this.isSamePayload(stashes_1)) {
                            return [2 /*return*/];
                        }
                        changed = this.stashedChanges().length != stashes_1.length;
                        if (!changed) {
                            changed = !this.stashedChanges().every(function (item1) {
                                return stashes_1.some(function (item2) { return item1.sha1 == item2.sha1; });
                            });
                        }
                        if (changed) {
                            this.stashedChanges(stashes_1.map(function (item) { return new StashItemViewModel(_this, item); }));
                        }
                        return [3 /*break*/, 5];
                    case 3:
                        err_1 = _a.sent();
                        if (err_1.errorCode != 'no-such-path') {
                            this.server.unhandledRejection(err_1);
                        }
                        else {
                            ungit.logger.warn('refresh failed: ', err_1);
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        ungit.logger.debug('stash.refresh() finished');
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    StashViewModel.prototype.toggleShowStash = function () {
        this.isShow(!this.isShow());
        storage.setItem('showStash', this.isShow());
    };
    return StashViewModel;
}(ComponentRoot));

},{"../ComponentRoot":1,"knockout":undefined,"lodash":undefined,"moment":undefined,"octicons":undefined,"ungit-components":undefined,"ungit-storage":undefined}]},{},[2])
//# sourceMappingURL=stash.bundle.js.map
