(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
var ko = require('knockout');
var md5 = require('blueimp-md5');
var moment = require('moment');
var octicons = require('octicons');
var components = require('ungit-components');
components.register('commit', function (args) { return new CommitViewModel(args); });
var CommitViewModel = /** @class */ (function () {
    function CommitViewModel(gitNode) {
        var _this = this;
        this.repoPath = gitNode.graph.repoPath;
        this.sha1 = gitNode.sha1;
        this.server = gitNode.graph.server;
        this.highlighted = gitNode.highlighted;
        this.nodeIsMousehover = gitNode.nodeIsMousehover;
        this.selected = gitNode.selected;
        this.pgpVerifiedString = gitNode.pgpVerifiedString;
        this.pgpIcon = octicons.verified.toSVG({ height: 18 });
        this.element = ko.observable();
        this.message = ko.observable();
        this.title = ko.observable();
        this.body = ko.observable();
        this.authorDate = ko.observable();
        this.authorDateFromNow = ko.observable();
        this.authorName = ko.observable();
        this.authorEmail = ko.observable();
        this.fileLineDiffs = ko.observable();
        this.numberOfAddedLines = ko.observable();
        this.numberOfRemovedLines = ko.observable();
        this.authorGravatar = ko.computed(function () { return md5((_this.authorEmail() || '').trim().toLowerCase()); });
        this.showCommitDiff = ko.computed(function () { return _this.fileLineDiffs() && _this.fileLineDiffs().length > 0; });
        this.diffStyle = ko.computed(function () {
            var marginLeft = Math.min(gitNode.branchOrder() * 70, 450) * -1;
            if (_this.selected() && _this.element())
                return { 'margin-left': "".concat(marginLeft, "px"), width: "".concat(window.innerWidth - 220, "px") };
            else
                return {};
        });
    }
    CommitViewModel.prototype.updateNode = function (parentElement) {
        ko.renderTemplate('commit', this, {}, parentElement);
    };
    CommitViewModel.prototype.setData = function (args) {
        var message = args.message.split('\n');
        this.message(args.message);
        this.title(message[0]);
        this.body(message.slice(message[1] ? 1 : 2).join('\n'));
        this.authorDate(moment(new Date(args.authorDate)));
        this.authorDateFromNow(this.authorDate().fromNow());
        this.authorName(args.authorName);
        this.authorEmail(args.authorEmail);
        this.numberOfAddedLines(args.additions);
        this.numberOfRemovedLines(args.deletions);
        this.fileLineDiffs(args.fileLineDiffs);
        this.commitDiff = ko.observable(components.create('commitDiff', {
            fileLineDiffs: this.fileLineDiffs(),
            sha1: this.sha1,
            repoPath: this.repoPath,
            server: this.server,
            showDiffButtons: this.selected
        }));
    };
    CommitViewModel.prototype.updateLastAuthorDateFromNow = function (deltaT) {
        this.lastUpdatedAuthorDateFromNow = this.lastUpdatedAuthorDateFromNow || 0;
        this.lastUpdatedAuthorDateFromNow += deltaT;
        if (this.lastUpdatedAuthorDateFromNow > 60 * 1000) {
            this.lastUpdatedAuthorDateFromNow = 0;
            this.authorDateFromNow(this.authorDate().fromNow());
        }
    };
    CommitViewModel.prototype.updateAnimationFrame = function (deltaT) {
        this.updateLastAuthorDateFromNow(deltaT);
    };
    CommitViewModel.prototype.stopClickPropagation = function (data, event) {
        event.stopImmediatePropagation();
    };
    CommitViewModel.prototype.copyHash = function () {
        navigator.clipboard.writeText(this.sha1);
    };
    return CommitViewModel;
}());

},{"blueimp-md5":undefined,"knockout":undefined,"moment":undefined,"octicons":undefined,"ungit-components":undefined}]},{},[1])
//# sourceMappingURL=commit.bundle.js.map
