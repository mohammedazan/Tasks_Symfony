(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentRoot = void 0;
var ComponentRoot = /** @class */ (function () {
    function ComponentRoot() {
        this.defaultDebounceOption = {
            maxWait: 1500,
            leading: false,
            trailing: true
        };
    }
    ComponentRoot.prototype.isSamePayload = function (value) {
        var jsonString = JSON.stringify(value);
        if (this._apiCache === jsonString) {
            ungit.logger.debug("ignoring redraw for same ".concat(this.constructor.name, " payload."));
            return true;
        }
        ungit.logger.debug("redrawing ".concat(this.constructor.name, " payload.  \n").concat(jsonString));
        this._apiCache = jsonString;
        return false;
    };
    ComponentRoot.prototype.clearApiCache = function () {
        this._apiCache = undefined;
    };
    return ComponentRoot;
}());
exports.ComponentRoot = ComponentRoot;

},{}],2:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var ko = require('knockout');
var _ = require('lodash');
var octicons = require('octicons');
var components = require('ungit-components');
var storage = require('ungit-storage');
var showRemote = 'showRemote';
var showBranch = 'showBranch';
var showTag = 'showTag';
var ComponentRoot = require('../ComponentRoot').ComponentRoot;
components.register('branches', function (args) {
    return new BranchesViewModel(args.server, args.graph, args.repoPath);
});
var BranchesViewModel = /** @class */ (function (_super) {
    __extends(BranchesViewModel, _super);
    function BranchesViewModel(server, graph, repoPath) {
        var _this = _super.call(this) || this;
        _this.repoPath = repoPath;
        _this.server = server;
        _this.updateRefs = _.debounce(_this._updateRefs, 250, _this.defaultDebounceOption);
        _this.branchesAndLocalTags = ko.observableArray();
        _this.current = ko.observable();
        _this.isShowRemote = ko.observable(storage.getItem(showRemote) != 'false');
        _this.isShowBranch = ko.observable(storage.getItem(showBranch) != 'false');
        _this.isShowTag = ko.observable(storage.getItem(showTag) != 'false');
        _this.graph = graph;
        var setLocalStorageAndUpdate = function (localStorageKey, value) {
            storage.setItem(localStorageKey, value);
            _this.updateRefs();
            return value;
        };
        _this.shouldAutoFetch = ungit.config.autoFetch;
        _this.isShowRemote.subscribe(function () {
            _this.clearApiCache();
            setLocalStorageAndUpdate(showRemote);
        });
        _this.isShowBranch.subscribe(function () {
            _this.clearApiCache();
            setLocalStorageAndUpdate(showBranch);
        });
        _this.isShowTag.subscribe(function () {
            _this.clearApiCache();
            setLocalStorageAndUpdate(showTag);
        });
        _this.refsLabel = ko.computed(function () { return _this.current() || 'master (no commits yet)'; });
        _this.branchIcon = octicons['git-branch'].toSVG({ height: 18 });
        _this.closeIcon = octicons.x.toSVG({ height: 18 });
        return _this;
    }
    BranchesViewModel.prototype.checkoutBranch = function (branch) {
        branch.checkout();
    };
    BranchesViewModel.prototype.updateNode = function (parentElement) {
        ko.renderTemplate('branches', this, {}, parentElement);
    };
    BranchesViewModel.prototype.clickFetch = function () {
        this.updateRefs(true);
    };
    BranchesViewModel.prototype.onProgramEvent = function (event) {
        if (event.event === 'request-app-content-refresh' ||
            event.event === 'branch-updated' ||
            event.event === 'git-directory-changed' ||
            event.event === 'current-remote-changed') {
            this.updateRefs();
        }
    };
    BranchesViewModel.prototype._updateRefs = function (forceRemoteFetch) {
        return __awaiter(this, void 0, void 0, function () {
            var branchesProm, refsProm, e_1, refs, version_1, sorted, e_2;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        forceRemoteFetch = forceRemoteFetch || this.shouldAutoFetch || '';
                        branchesProm = this.server.getPromise('/branches', { path: this.repoPath() });
                        refsProm = this.server.getPromise('/refs', {
                            path: this.repoPath(),
                            remoteFetch: forceRemoteFetch
                        });
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, branchesProm];
                    case 2:
                        // set current branch
                        (_a.sent()).forEach(function (b) {
                            if (b.current) {
                                _this.current(b.name);
                            }
                        });
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        this.current('~error');
                        ungit.logger.warn('error while setting current branch', e_1);
                        return [3 /*break*/, 4];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, refsProm];
                    case 5:
                        refs = _a.sent();
                        if (this.isSamePayload(refs)) {
                            return [2 /*return*/];
                        }
                        version_1 = Date.now();
                        sorted = refs
                            .map(function (r) {
                            var ref = _this.graph.getRef(r.name.replace('refs/tags', 'tag: refs/tags'));
                            ref.node(_this.graph.getNode(r.sha1));
                            ref.version = version_1;
                            return ref;
                        })
                            .sort(function (a, b) {
                            if (a.current() || b.current()) {
                                return a.current() ? -1 : 1;
                            }
                            else if (a.isRemoteBranch === b.isRemoteBranch) {
                                if (a.name < b.name) {
                                    return -1;
                                }
                                if (a.name > b.name) {
                                    return 1;
                                }
                                return 0;
                            }
                            else {
                                return a.isRemoteBranch ? 1 : -1;
                            }
                        })
                            .filter(function (ref) {
                            if (ref.localRefName == 'refs/stash')
                                return false;
                            if (ref.localRefName.endsWith('/HEAD'))
                                return false;
                            if (!_this.isShowRemote() && ref.isRemote)
                                return false;
                            if (!_this.isShowBranch() && ref.isBranch)
                                return false;
                            if (!_this.isShowTag() && ref.isTag)
                                return false;
                            return true;
                        });
                        this.branchesAndLocalTags(sorted);
                        this.graph.refs().forEach(function (ref) {
                            // ref was removed from another source
                            if (!ref.isRemoteTag && ref.value !== 'HEAD' && (!ref.version || ref.version < version_1)) {
                                ref.remove(true);
                            }
                        });
                        return [3 /*break*/, 7];
                    case 6:
                        e_2 = _a.sent();
                        ungit.logger.error('error during branch update: ', e_2);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    BranchesViewModel.prototype.branchRemove = function (branch) {
        var details = "\"".concat(branch.refName, "\"");
        if (branch.isRemoteBranch) {
            details = "<code style='font-size: 100%'>REMOTE</code> ".concat(details);
        }
        components.showModal('yesnomodal', {
            title: 'Are you sure?',
            details: 'Deleting ' + details + ' branch cannot be undone with ungit.',
            closeFunc: function (isYes) {
                if (!isYes)
                    return;
                return branch.remove();
            }
        });
    };
    return BranchesViewModel;
}(ComponentRoot));

},{"../ComponentRoot":1,"knockout":undefined,"lodash":undefined,"octicons":undefined,"ungit-components":undefined,"ungit-storage":undefined}]},{},[2])
//# sourceMappingURL=branches.bundle.js.map
