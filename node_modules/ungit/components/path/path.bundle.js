(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentRoot = void 0;
var ComponentRoot = /** @class */ (function () {
    function ComponentRoot() {
        this.defaultDebounceOption = {
            maxWait: 1500,
            leading: false,
            trailing: true
        };
    }
    ComponentRoot.prototype.isSamePayload = function (value) {
        var jsonString = JSON.stringify(value);
        if (this._apiCache === jsonString) {
            ungit.logger.debug("ignoring redraw for same ".concat(this.constructor.name, " payload."));
            return true;
        }
        ungit.logger.debug("redrawing ".concat(this.constructor.name, " payload.  \n").concat(jsonString));
        this._apiCache = jsonString;
        return false;
    };
    ComponentRoot.prototype.clearApiCache = function () {
        this._apiCache = undefined;
    };
    return ComponentRoot;
}());
exports.ComponentRoot = ComponentRoot;

},{}],2:[function(require,module,exports){
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var ko = require('knockout');
var octicons = require('octicons');
var components = require('ungit-components');
var addressParser = require('ungit-address-parser');
var navigation = require('ungit-navigation');
var programEvents = require('ungit-program-events');
var encodePath = require('ungit-address-parser').encodePath;
var storage = require('ungit-storage');
var ComponentRoot = require('../ComponentRoot').ComponentRoot;
var showCreateRepoKey = 'isShowCreateRepo';
components.register('path', function (args) {
    return new PathViewModel(args.server, args.path);
});
var SubRepositoryViewModel = /** @class */ (function () {
    function SubRepositoryViewModel(server, path) {
        var _this = this;
        this.path = path;
        this.title = path;
        this.link = "".concat(ungit.config.rootPath, "/#/repository?path=").concat(encodePath(path));
        this.arrowIcon = octicons['arrow-right'].toSVG({ height: 24 });
        this.remote = ko.observable('...');
        server
            .getPromise("/remotes/origin?path=".concat(encodePath(this.path)))
            .then(function (remote) {
            _this.remote(remote.address.replace(/\/\/.*?@/, '//***@'));
        })
            .catch(function (err) {
            _this.remote('');
        });
    }
    return SubRepositoryViewModel;
}());
var PathViewModel = /** @class */ (function (_super) {
    __extends(PathViewModel, _super);
    function PathViewModel(server, path) {
        var _this = _super.call(this) || this;
        _this.server = server;
        _this.repoPath = ko.observable(path);
        _this.dirName =
            _this.repoPath()
                .replace(/\\/g, '/')
                .split('/')
                .filter(function (s) { return s; })
                .slice(-1)[0] || '/';
        _this.status = ko.observable('loading');
        _this.cloneUrl = ko.observable();
        _this.showDirectoryCreatedAlert = ko.observable(false);
        _this.subRepos = ko.observableArray();
        _this.cloneDestinationImplicit = ko.computed(function () {
            var defaultText = 'destination folder';
            if (!_this.cloneUrl())
                return defaultText;
            var parsedAddress = addressParser.parseAddress(_this.cloneUrl());
            return parsedAddress.shortProject || defaultText;
        });
        _this.cloneDestination = ko.observable();
        _this.repository = ko.observable();
        _this.expandIcon = ko.observable();
        _this.isRecursiveSubmodule = ko.observable(true);
        _this.showCreateRepoKey = "".concat(showCreateRepoKey, "-").concat(_this.repoPath());
        var storageValue = storage.getItem(_this.showCreateRepoKey);
        _this.isShowCreateRepo = ko.observable(storageValue && storageValue === 'false' ? false : true);
        _this.updateShowCreateRepoMetadata();
        return _this;
    }
    PathViewModel.prototype.toggleShowCreateRepo = function () {
        this.isShowCreateRepo(!this.isShowCreateRepo());
        storage.setItem(this.showCreateRepoKey, this.isShowCreateRepo() ? 'true' : 'false');
        this.updateShowCreateRepoMetadata();
    };
    PathViewModel.prototype.updateShowCreateRepoMetadata = function () {
        if (this.isShowCreateRepo()) {
            this.expandIcon(octicons['chevron-right'].toSVG({ height: 28 }));
        }
        else {
            this.expandIcon(octicons['chevron-down'].toSVG({ height: 35 }));
        }
    };
    PathViewModel.prototype.updateNode = function (parentElement) {
        ko.renderTemplate('path', this, {}, parentElement);
    };
    PathViewModel.prototype.shown = function () {
        this.updateStatus();
    };
    PathViewModel.prototype.updateAnimationFrame = function (deltaT) {
        if (this.repository())
            this.repository().updateAnimationFrame(deltaT);
    };
    PathViewModel.prototype.updateStatus = function () {
        return __awaiter(this, void 0, void 0, function () {
            var status;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ungit.logger.debug('path.updateStatus() triggered');
                        return [4 /*yield*/, this.server.getPromise('/quickstatus', { path: this.repoPath() })];
                    case 1:
                        status = _a.sent();
                        try {
                            if (this.isSamePayload(status)) {
                                return [2 /*return*/];
                            }
                            if (status.type == 'inited' || status.type == 'bare') {
                                if (this.repoPath() !== status.gitRootPath) {
                                    this.repoPath(status.gitRootPath);
                                    programEvents.dispatch({ event: 'navigated-to-path', path: this.repoPath() });
                                    programEvents.dispatch({ event: 'working-tree-changed' });
                                }
                                this.status(status.type);
                                if (!this.repository()) {
                                    this.repository(components.create('repository', { server: this.server, path: this }));
                                }
                            }
                            else if (status.type == 'uninited' || status.type == 'no-such-path') {
                                if (status.subRepos && status.subRepos.length > 0) {
                                    this.subRepos(status.subRepos.map(function (subRepo) { return new SubRepositoryViewModel(_this.server, subRepo); }));
                                }
                                this.status(status.type);
                                this.repository(null);
                            }
                        }
                        catch (err) {
                            ungit.logger.debug('path.updateStatus() errored', err);
                        }
                        finally {
                            ungit.logger.debug('path.updateStatus() finished');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    PathViewModel.prototype.initRepository = function () {
        var _this = this;
        return this.server
            .postPromise('/init', { path: this.repoPath() })
            .catch(function (e) { return _this.server.unhandledRejection(e); })
            .finally(function () { return _this.updateStatus(); });
    };
    PathViewModel.prototype.onProgramEvent = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var promises;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        promises = [];
                        if (event.event == 'working-tree-changed' || event.event == 'request-app-content-refresh') {
                            promises.push(this.updateStatus());
                        }
                        if (this.repository()) {
                            promises.push(this.repository().onProgramEvent(event));
                        }
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PathViewModel.prototype.cloneRepository = function () {
        var _this = this;
        this.status('cloning');
        var dest = this.cloneDestination() || this.cloneDestinationImplicit();
        return this.server
            .postPromise('/clone', {
            path: this.repoPath(),
            url: this.cloneUrl(),
            destinationDir: dest,
            isRecursiveSubmodule: this.isRecursiveSubmodule()
        })
            .then(function (res) { return navigation.browseTo('repository?path=' + addressParser.encodePath(res.path)); })
            .catch(function (e) { return _this.server.unhandledRejection(e); })
            .finally(function () {
            programEvents.dispatch({ event: 'working-tree-changed' });
        });
    };
    PathViewModel.prototype.createDir = function () {
        var _this = this;
        this.showDirectoryCreatedAlert(true);
        return this.server
            .postPromise('/createDir', { dir: this.repoPath() })
            .catch(function (e) { return _this.server.unhandledRejection(e); })
            .then(function () { return _this.updateStatus(); });
    };
    return PathViewModel;
}(ComponentRoot));

},{"../ComponentRoot":1,"knockout":undefined,"octicons":undefined,"ungit-address-parser":undefined,"ungit-components":undefined,"ungit-navigation":undefined,"ungit-program-events":undefined,"ungit-storage":undefined}]},{},[2])
//# sourceMappingURL=path.bundle.js.map
