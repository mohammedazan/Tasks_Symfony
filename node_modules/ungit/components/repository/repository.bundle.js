(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
var ko = require('knockout');
var octicons = require('octicons');
var components = require('ungit-components');
var programEvents = require('ungit-program-events');
var encodePath = require('ungit-address-parser').encodePath;
components.register('repository', function (args) { return new RepositoryViewModel(args.server, args.path); });
var RepositoryViewModel = /** @class */ (function () {
    function RepositoryViewModel(server, path) {
        var _this = this;
        this.server = server;
        this.isBareDir = path.status() === 'bare';
        this.repoPath = path.repoPath;
        this.gitErrors = components.create('gitErrors', { server: server, repoPath: this.repoPath });
        this.graph = components.create('graph', { server: server, repoPath: this.repoPath });
        this.remotes = components.create('remotes', { server: server, repoPath: this.repoPath });
        this.submodules = components.create('submodules', { server: server, repoPath: this.repoPath });
        this.stash = this.isBareDir
            ? {}
            : components.create('stash', { server: server, repoPath: this.repoPath });
        this.staging = this.isBareDir
            ? {}
            : components.create('staging', { server: server, repoPath: this.repoPath, graph: this.graph });
        this.branches = components.create('branches', {
            server: server,
            graph: this.graph,
            repoPath: this.repoPath
        });
        this.repoPath.subscribe(function (value) {
            _this.server.watchRepository(value);
        });
        this.server.watchRepository(this.repoPath());
        this.showLog = this.isBareDir ? ko.observable(true) : this.staging.isStageValid;
        this.parentModulePath = ko.observable();
        this.parentModuleLink = ko.observable();
        this.isSubmodule = ko.computed(function () { return _this.parentModulePath() && _this.parentModuleLink(); });
        this.refreshSubmoduleStatus();
        if (window.location.search.includes('noheader=true')) {
            this.refreshButton = components.create('refreshbutton', { isLarge: false });
        }
        else {
            this.refreshButton = false;
        }
        this.ignoreIcon = octicons.file.toSVG({ height: 18 });
    }
    RepositoryViewModel.prototype.updateNode = function (parentElement) {
        ko.renderTemplate('repository', this, {}, parentElement);
    };
    RepositoryViewModel.prototype.onProgramEvent = function (event) {
        if (this.gitErrors.onProgramEvent)
            this.gitErrors.onProgramEvent(event);
        if (this.graph.onProgramEvent)
            this.graph.onProgramEvent(event);
        if (this.staging.onProgramEvent)
            this.staging.onProgramEvent(event);
        if (this.stash.onProgramEvent)
            this.stash.onProgramEvent(event);
        if (this.remotes.onProgramEvent)
            this.remotes.onProgramEvent(event);
        if (this.submodules.onProgramEvent)
            this.submodules.onProgramEvent(event);
        if (this.branches.onProgramEvent)
            this.branches.onProgramEvent(event);
        if (event.event == 'connected')
            this.server.watchRepository(this.repoPath());
        // If we get a reconnect event it's usually because the server crashed and then restarted
        // or something like that, so we need to tell it to start watching the path again
    };
    RepositoryViewModel.prototype.updateAnimationFrame = function (deltaT) {
        if (this.graph.updateAnimationFrame)
            this.graph.updateAnimationFrame(deltaT);
    };
    RepositoryViewModel.prototype.refreshSubmoduleStatus = function () {
        var _this = this;
        return this.server
            .getPromise('/baserepopath', { path: this.repoPath() })
            .then(function (baseRepoPath) {
            if (baseRepoPath.path) {
                return _this.server
                    .getPromise('/submodules', { path: baseRepoPath.path })
                    .then(function (submodules) {
                    var baseName = _this.repoPath().substring(baseRepoPath.path.length + 1);
                    for (var n = 0; n < submodules.length; n++) {
                        if (submodules[n].path === baseName) {
                            _this.parentModulePath(baseRepoPath.path);
                            _this.parentModuleLink("/#/repository?path=".concat(encodePath(baseRepoPath.path)));
                            return;
                        }
                    }
                });
            }
        })
            .catch(function (err) {
            _this.parentModuleLink(undefined);
            _this.parentModulePath(undefined);
        });
    };
    RepositoryViewModel.prototype.editGitignore = function () {
        var _this = this;
        return this.server
            .getPromise('/gitignore', { path: this.repoPath() })
            .then(function (res) {
            return components.showModal('texteditmodal', {
                title: "".concat(_this.repoPath()).concat(ungit.config.fileSeparator, ".gitignore"),
                content: res.content,
                closeFunc: function (isYes) {
                    if (isYes) {
                        _this.server.putPromise('/gitignore', {
                            path: _this.repoPath(),
                            data: document.querySelector('.modal-body .text-area-content').value
                        });
                    }
                }
            });
        })
            .catch(function (e) {
            // Not a git error but we are going to treat like one
            programEvents.dispatch({
                event: 'git-error',
                data: {
                    command: "fs.write \"".concat(_this.repoPath()).concat(ungit.config.fileSeparator, ".gitignore\""),
                    error: e.message || e.errorSummary,
                    stdout: '',
                    stderr: e.stack,
                    repoPath: _this.repoPath()
                }
            });
        });
    };
    return RepositoryViewModel;
}());

},{"knockout":undefined,"octicons":undefined,"ungit-address-parser":undefined,"ungit-components":undefined,"ungit-program-events":undefined}]},{},[1])
//# sourceMappingURL=repository.bundle.js.map
